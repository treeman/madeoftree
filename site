#!/usr/bin/env perl

use autodie;
use Modern::Perl;
use Getopt::Long;
use Data::Dumper;
use File::Basename;
use POSIX qw/strftime/;
use File::Path qw(make_path);

# Set website url
my $url = "www.madeoftree.se";
# Custom domain must have the same name as bucket
my $bucket = $url;

# Fetch path to current directory
my $dir = dirname(__FILE__);

# Fetch command line options
my $help;
my $debug;

my $update;
my $build;
my $sync;
my $host;

my $new;
my $edit;
my $wiki;

GetOptions(
    'help|h' => \$help,
    'debug' => \$debug,

    'update' => \$update,
    'build' => \$build,
    'sync' => \$sync,
    'host' => \$host,

    'new' => \$new,
    'edit' => \$edit,

    'wiki' => \$wiki,
);

sub get_clean_title {
    my $clean_title = lc (join ' ', @ARGV);
    $clean_title =~ s/\s/_/g;
    $clean_title =~ s/[^\w\d]//g;

    return $clean_title;
}

sub what_post_file {
    die "No title given" unless scalar @ARGV;

    my $now = strftime ('%F', gmtime);
    my $clean_title = get_clean_title ();

    return "$dir/_posts/$now-$clean_title.markdown";
}

# Generate a directory tree for files
sub make_dir_tree
{
    my ($file) = @_;

    # Remove file basename
    my @dirs = split '/', $file;
    my $base = pop @dirs;
    my $dir = join ('/', @dirs);

    make_path($dir);
}

sub help {
    say "Easy site script.";
    say "";
    say "   --update";
    say "       Build and sync site.";
    say "   --build";
    say "       Generate _site.";
    say "   --sync";
    say "       Sync site from beneath _site.";
    say "   --host";
    say "       Host with jekyll server.";
    say "   --wiki [page]";
    say "       Write wiki page.";
    say "   --new [post title]";
    say "       Start writing a new post.";
    say "   --edit [post title]";
    say "       Edit a post.";
    say "";

    exit;
}

sub build {
    say "Building site...";

    `jekyll --url $url`;
}

sub sync {
    say "Syncing...";

    if ($debug) {
        exec "s3cmd sync --dry-run --acl-public --guess-mime-type --delete-removed ./_site/ s3://$bucket";
    }
    else {
        exec "s3cmd sync --acl-public --guess-mime-type --delete-removed $dir/_site/ s3://$bucket";
    }

}

if ($help) {
    help();
}
elsif ($wiki) {
    die "No name given" unless scalar @ARGV;

    my $title = join ' ', @ARGV;
    my $clean_title = lc ($title);
    $clean_title =~ s/\s/_/g;
    $clean_title =~ s|[^\w\d/]||g;

    my $file = "$dir/wiki/$clean_title/index.markdown";

    unless (-r $file) {
        make_dir_tree ($file);

        open my $fh, '>:encoding(UTF-8)', $file;

        say $fh "---";
        say $fh "layout: wiki";
        say $fh "title: " . join (' ', @ARGV);
        say $fh "---";
        say $fh "";
        say $fh "";

        close $fh;
    }

    exec "vim $file";
}
elsif ($edit) {
    my $file = what_post_file();

    say "File '$file'" if $debug;

    die "Can't read file: '$file'" unless -r $file;

    exec "vim $file";
}
elsif ($new) {
    my $file = what_post_file();

    say "File '$file'" if $debug;

    die "File exists: '$file'" if -r $file;

    open my $fh, '>:encoding(UTF-8)', $file;

    say $fh "---";
    say $fh "layout: post";
    say $fh "title: " . join (' ', @ARGV);
    say $fh "date: " . strftime ('%F %T', gmtime);
    say $fh "category: ";
    say $fh "tags: ";
    say $fh "---";
    say $fh "";
    say $fh "";

    close $fh;

    exec "vim $file";
}
elsif ($host) {
    #build();

    say "Running jekyll server";
    say "url: http://0.0.0.0:4000/";

    exec "jekyll --server --auto --url $url $dir/ $dir/_site";
}
elsif ($update) {
    build();
    sync();
}
elsif ($build) {
    build();
}
elsif ($sync) {
    sync();
}
else {
    help();
}

